//
//  MIBundle.h
//  Nyxian
//
//  Created by SeanIsTethered on 06.09.25.
//

/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/InstalledContentLibrary.framework/InstalledContentLibrary
 */

#define PrivClass(NAME) NSClassFromString(@#NAME)

@interface MIBundle : NSObject

@property (nonatomic, readonly) bool allowsAppleAppExtensionsNotInExtensionCache;
@property (nonatomic, readonly, copy) NSString *bundleName;
@property (nonatomic, readonly, copy) NSString *bundleParentSubdirectory;
@property (nonatomic, readonly, copy) NSString *bundleShortVersion;
@property (nonatomic, readonly) unsigned char bundleType;
@property (nonatomic, readonly, copy) NSString *bundleTypeDescription;
@property (nonatomic, readonly) NSURL *bundleURL;
@property (nonatomic, readonly, copy) NSString *bundleVersion;
@property (nonatomic, readonly, copy) NSArray *deviceFamilies;
@property (nonatomic, readonly, copy) NSString *displayName;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, readonly, copy) NSDictionary *infoPlistSubset;
@property (nonatomic, readonly) bool isAppTypeBundle;
@property (nonatomic, readonly) bool isDeletable;
@property (nonatomic, readonly) bool isLaunchProhibited;
@property (nonatomic, readonly) bool isPlaceholder;
@property (nonatomic) bool isPlaceholderStatusValid;
@property (nonatomic, readonly) bool isRemovableSystemApp;
@property (nonatomic, readonly) bool isStaticContent;
@property (nonatomic, readonly) bool isWatchApp;
@property (nonatomic, readonly) bool mayContainAppExtensions;
@property (nonatomic, readonly) bool mayContainFrameworks;
@property (nonatomic, readonly) bool mayHaveExecutableProgram;
@property (nonatomic, readonly, copy) NSString *minimumOSVersion;
@property (nonatomic, readonly) bool needsDataContainer;
@property (nonatomic, readonly) MIBundle *parentBundle;
@property (nonatomic, readonly, copy) NSString *parentBundleID;
@property (nonatomic, readonly, copy) NSString *relativePath;
@property (nonatomic, readonly, copy) NSString *sdkBuildVersion;
@property (nonatomic, readonly) NSSet *siriIntents;
@property (nonatomic, readonly, copy) NSArray *supportedDevices;

+ (id)_URLOfFirstBundleInDirectory:(id)arg1 withExtension:(id)arg2 error:(id*)arg3;
+ (id)bundleForURL:(id)arg1 error:(id*)arg2;
+ (bool)bundleIsInDenyList:(id)arg1;
+ (id)bundlesInParentBundle:(id)arg1 subDirectory:(id)arg2 matchingPredicate:(id /* block */)arg3 error:(id*)arg4;

- (id)_filterExtensionBundles:(id)arg1 forValidationFlags:(unsigned char)arg2;
- (id)_filterExtensionBundlesNotInCacheIfNeeded:(id)arg1;
- (id)_infoPlistKeysToLoad;
- (bool)_isMinimumOSVersion:(id)arg1 applicableToOSVersion:(id)arg2 requiredOS:(unsigned long long)arg3 error:(id*)arg4;
- (bool)_validateAppNSPrivacyTrackingDomainsWithError:(id*)arg1;
- (bool)_validateExtensions:(id)arg1 error:(id*)arg2;
- (bool)_validateWithError:(id*)arg1;
- (bool)allowsAppleAppExtensionsNotInExtensionCache;
- (id)appExtensionBundlesPerformingPlatformValidation:(unsigned char)arg1 withError:(id*)arg2;
- (id)appExtensionBundlesWithError:(id*)arg1;
- (id)bundleName;
- (id)bundleParentDirectoryURL;
- (id)bundleParentSubdirectory;
- (id)bundleShortVersion;
- (unsigned char)bundleType;
- (id)bundleTypeDescription;
- (id)bundleURL;
- (id)bundleVersion;
- (id)currentOSVersionForValidationUsingPlatform:(unsigned long long*)arg1 withError:(id*)arg2;
- (id)description;
- (id)deviceFamilies;
- (id)displayName;
- (id)driverKitBundlesPerformingPlatformValidation:(unsigned char)arg1 withError:(id*)arg2;
- (id)driverKitExtensionBundles;
- (id)driverKitExtensionBundlesWithError:(id*)arg1;
- (id)extensionKitBundles;
- (id)extensionKitBundlesPerformingPlatformValidation:(unsigned char)arg1 withError:(id*)arg2;
- (id)extensionKitBundlesWithError:(id*)arg1;
- (id)frameworkBundles;
- (id)frameworkBundlesWithError:(id*)arg1;
- (bool)getIsBuiltForiOSPlatform:(bool*)arg1 error:(id*)arg2;
- (id)identifier;
- (id)infoPlistSubset;
- (void)infoPlistSubsetForTesting:(id)arg1;
- (id)initForTesting;
- (id)initWithBundleInDirectory:(id)arg1 withExtension:(id)arg2 error:(id*)arg3;
- (id)initWithBundleParentURL:(id)arg1 parentSubdirectory:(id)arg2 bundleName:(id)arg3 error:(id*)arg4;
- (id)initWithBundleURL:(id)arg1 error:(id*)arg2;
- (id)initWithParentBundle:(id)arg1 parentSubdirectory:(id)arg2 bundleName:(id)arg3 error:(id*)arg4;
- (bool)isAppTypeBundle;
- (bool)isApplicableToCurrentDeviceCapabilitiesWithError:(id*)arg1;
- (bool)isApplicableToCurrentDeviceFamilyWithError:(id*)arg1;
- (bool)isApplicableToCurrentOSVersionWithError:(id*)arg1;
- (bool)isApplicableToOSVersion:(id)arg1 error:(id*)arg2;
- (bool)isApplicableToOSVersionEarlierThan:(id)arg1;
- (bool)isCompatibleWithDeviceFamily:(int)arg1;
- (bool)isDeletable;
- (bool)isLaunchProhibited;
- (bool)isMinimumOSVersion:(id)arg1 applicableToOSVersion:(id)arg2 error:(id*)arg3;
- (bool)isPlaceholder;
- (bool)isPlaceholderStatusValid;
- (bool)isRemovableSystemApp;
- (bool)isStaticContent;
- (bool)isWatchApp;
- (bool)mayContainAppExtensions;
- (bool)mayContainFrameworks;
- (bool)mayHaveExecutableProgram;
- (id)minimumOSVersion;
- (bool)needsDataContainer;
- (id)parentBundle;
- (id)parentBundleID;
- (id)pluginKitBundles;
- (id)pluginKitBundlesPerformingPlatformValidation:(unsigned char)arg1 withError:(id*)arg2;
- (id)pluginKitBundlesWithError:(id*)arg1;
- (id)relativePath;
- (id)sdkBuildVersion;
- (bool)sdkBuildVersionIsAtLeast:(id)arg1;
- (void)setBundleParentDirectoryURL:(id)arg1;
- (void)setDriverKitExtensionBundles:(id)arg1;
- (void)setExtensionKitBundles:(id)arg1;
- (void)setFrameworkBundles:(id)arg1;
- (void)setIsPlaceholderStatusValid:(bool)arg1;
- (bool)setIsPlaceholderWithError:(id*)arg1;
- (void)setPluginKitBundles:(id)arg1;
- (void)setXpcServiceBundles:(id)arg1;
- (id)siriIntents;
- (id)supportedDevices;
- (bool)thinningMatchesCurrentDeviceWithError:(id*)arg1;
- (id)thisBundleAndAllContainedBundlesWithError:(id*)arg1;
- (bool)validateAppMetadataWithError:(id*)arg1;
- (bool)validateBundleMetadataWithError:(id*)arg1;
- (bool)validateDriverKitExtensionMetadataWithError:(id*)arg1;
- (bool)validateExtensionKitMetadataWithError:(id*)arg1;
- (bool)validatePluginKitMetadataWithError:(id*)arg1;
- (id)xpcServiceBundles;
- (id)xpcServiceBundlesWithError:(id*)arg1;

@end

@interface MIExecutableBundle : MIBundle

@property (nonatomic, readonly) struct __CFBundle { }*cfBundle;
@property (nonatomic, readonly) unsigned long long codeSignatureVerificationState;
@property (nonatomic, readonly, copy) NSString *companionAppIdentifier;
@property (nonatomic, readonly) unsigned long long compatibilityState;
@property (nonatomic, readonly, copy) NSArray *counterpartIdentifiers;
@property (nonatomic, readonly) Class dataContainerClass;
@property (nonatomic, readonly) unsigned long long dataContainerContentClass;
@property (nonatomic, readonly) int dataProtectionClass;
@property (nonatomic, readonly) unsigned long long estimatedMemoryUsageToValidate;
@property (nonatomic, readonly, copy) NSString *executableName;
@property (nonatomic, readonly) NSURL *executableURL;
@property (nonatomic, readonly) bool hasSinf;
@property (nonatomic, readonly) bool hasWatchCustomNotification;
@property (nonatomic, readonly) bool hasWatchGlance;
@property (nonatomic, readonly) bool isExtensionBasedWatchKitApp;
@property (nonatomic, readonly) bool isExtensionlessWatchKitApp;
@property (nonatomic, readonly) bool isWatchOnlyApp;
@property (nonatomic) unsigned long long lsInstallType;
@property (nonatomic, readonly) unsigned int maxLinkedSDKVersion;
@property (nonatomic, readonly) bool minimumWatchOSVersionIsPreV6;
@property (nonatomic, readonly) bool needsSinf;
@property (nonatomic, readonly) NSURL *relativeExecutablePath;
@property (nonatomic, readonly) NSURL *rootSinfURL;
@property (nonatomic, readonly) NSURL *rootSupfURL;
@property (nonatomic, readonly) NSURL *rootSuppURL;
@property (nonatomic) unsigned int sinfDataType;
@property (nonatomic) bool sinfDataTypeIsSet;
@property (nonatomic, readonly) bool watchKitAppRunsIndependentlyOfCompanion;

+ (id)bundlesInParentBundle:(id)arg1 subDirectory:(id)arg2 matchingPredicate:(id /* block */)arg3 error:(id*)arg4;
+ (bool)isGrandfatheredNonContainerizedForSigningInfo:(id)arg1;

- (id)_codeSigningInfoFromMCM;
- (id)_dataContainerCreatingIfNeeded:(bool)arg1 forPersona:(id)arg2 makeLive:(bool)arg3 checkIfNeeded:(bool)arg4 created:(bool*)arg5 error:(id*)arg6;
- (id)_discoverWatchAppBundleAsPlaceholder:(bool)arg1 error:(id*)arg2;
- (bool)_hasNoConflictWithSystemAppsForSigningInfo:(id)arg1 error:(id*)arg2;
- (bool)_hasNonContainerizingEntitlement:(id)arg1 checkSeatbeltProfiles:(bool)arg2;
- (bool)_hasResource:(id)arg1 withExtension:(id)arg2;
- (int)_installEmbeddedProvisioningProfileAtURL:(id)arg1 withProgress:(id /* block */)arg2;
- (id)_nameListForPlatformSet:(id)arg1;
- (bool)_validateWithError:(id*)arg1;
- (bool)allowsAppleAppExtensionsNotInExtensionCache;
- (void)bestEffortRollbackSinfData:(id)arg1;
- (id)bundleContainer;
- (id)bundleSignatureVersionWithError:(id*)arg1;
- (unsigned long long)codeSignatureVerificationState;
- (id)codeSigningInfo;
- (id)codeSigningInfoByValidatingResources:(bool)arg1 performingOnlineAuthorization:(bool)arg2 ignoringCachedSigningInfo:(bool)arg3 checkingTrustCacheIfApplicable:(bool)arg4 skippingProfileIDValidation:(bool)arg5 error:(id*)arg6;
- (id)codeSigningInfoError;
- (id)companionAppIdentifier;
- (unsigned long long)compatibilityState;
- (id)counterpartIdentifiers;
- (Class)dataContainerClass;
- (unsigned long long)dataContainerContentClass;
- (id)dataContainerCreatingIfNeeded:(bool)arg1 forPersona:(id)arg2 makeLive:(bool)arg3 created:(bool*)arg4 error:(id*)arg5;
- (id)dataContainerForPersona:(id)arg1 error:(id*)arg2;
- (int)dataProtectionClass;
- (void)dealloc;
- (id)enumerateDylibsWithBlock:(id /* block */)arg1;
- (unsigned long long)estimatedMemoryUsageToValidate;
- (bool)executableExistsWithError:(id*)arg1;
- (id)executableImageSlices;
- (id)executableImageSlicesWithError:(id*)arg1;
- (id)executableName;
- (id)executablePlatformsWithError:(id*)arg1;
- (id)executableURL;
- (id)fairPlaySinfInfoWithError:(id*)arg1;
- (bool)getSinfDataType:(unsigned int*)arg1 withError:(id*)arg2;
- (bool)hasExecutableSliceForCPUType:(int)arg1 subtype:(int)arg2 error:(id*)arg3;
- (bool)hasExecutableSliceForPlatform:(unsigned int)arg1 error:(id*)arg2;
- (bool)hasNoConflictsWithOtherInstalledEntitiesForSigningInfo:(id)arg1 forPersona:(id)arg2 error:(id*)arg3;
- (bool)hasOnlyAllowedWatchKitAppInfoPlistKeysForWatchKitVersion:(unsigned char)arg1 error:(id*)arg2;
- (bool)hasSinf;
- (bool)hasWatchCustomNotification;
- (bool)hasWatchGlance;
- (id)initForTesting;
- (id)initWithBundleInContainer:(id)arg1 withExtension:(id)arg2 error:(id*)arg3;
- (int)installEmbeddedProvisioningProfileWithProgress:(id /* block */)arg1;
- (int)installMacStyleEmbeddedProvisioningProfileWithProgress:(id /* block */)arg1;
- (id)installationIdentity;
- (id)installationIdentitySettingIfNotSet:(bool)arg1 withError:(id*)arg2;
- (bool)isExtensionBasedWatchKitApp;
- (bool)isExtensionlessWatchKitApp;
- (bool)isWatchOnlyApp;
- (unsigned long long)lsInstallType;
- (id)lsInstallTypeWithError:(id*)arg1;
- (bool)makeAndSetNewInstallationIdentityWithError:(id*)arg1;
- (bool)makeExecutableWithError:(id*)arg1;
- (unsigned int)maxLinkedSDKVersion;
- (bool)minimumWatchOSVersionIsPreV6;
- (bool)needsDataContainer;
- (bool)needsSinf;
- (bool)onlyHasExecutableSlicesForPlatform:(unsigned int)arg1 error:(id*)arg2;
- (id)relativeExecutablePath;
- (void)removeSinf;
- (bool)replicateRootSinfWithError:(id*)arg1;
- (id)rootSinfURL;
- (id)rootSupfURL;
- (id)rootSuppURL;
- (void)setBundleContainer:(id)arg1;
- (void)setBundleParentDirectoryURL:(id)arg1;
- (void)setCodeSigningInfo:(id)arg1;
- (void)setCodeSigningInfoError:(id)arg1;
- (void)setExecutableImageSlices:(id)arg1;
- (void)setInstallationIdentity:(id)arg1;
- (bool)setLaunchWarningData:(id)arg1 withError:(id*)arg2;
- (void)setLsInstallType:(unsigned long long)arg1;
- (void)setSinfDataType:(unsigned int)arg1;
- (bool)setSinfDataType:(unsigned int)arg1 withError:(id*)arg2;
- (void)setSinfDataTypeIsSet:(bool)arg1;
- (void)setWatchKitAppExecutableHash:(id)arg1;
- (void)setWatchKitPlugin:(id)arg1;
- (void)setWk2AppBundle:(id)arg1;
- (void)setWk2AppBundleError:(id)arg1;
- (unsigned int)sinfDataType;
- (bool)sinfDataTypeIsSet;
- (bool)transferInstallationIdentityFromBundle:(id)arg1 error:(id*)arg2;
- (id)updateAndValidateSinf:(id)arg1 error:(id*)arg2;
- (id)updateAndValidateSinf:(id)arg1 withRollback:(bool)arg2 error:(id*)arg3;
- (bool)updateMCMWithCodeSigningInfoAsAdvanceCopy:(bool)arg1 withError:(id*)arg2;
- (bool)updateSinfWithData:(id)arg1 error:(id*)arg2;
- (bool)validatePluginKitMetadataWithError:(id*)arg1;
- (bool)validateSinfWithError:(id*)arg1;
- (id)watchKitAppBundleForWKVersionOrEarlier:(unsigned char)arg1 error:(id*)arg2;
- (id)watchKitAppExecutableHash;
- (id)watchKitAppExecutableHashWithError:(id*)arg1;
- (bool)watchKitAppRunsIndependentlyOfCompanion;
- (id)watchKitPlugin;
- (id)watchKitPluginWithError:(id*)arg1;
- (id)watchKitV2AppBundleWithError:(id*)arg1;
- (unsigned char)watchKitVersionWithError:(id*)arg1;
- (id)wk2AppBundle;
- (id)wk2AppBundleError;

@end

@interface MICodeSigningInfo : NSObject {
    NSString * _codeInfoIdentifier;
    unsigned long long  _codeSignerType;
    NSDictionary * _entitlements;
    NSData * _launchWarningData;
    unsigned long long  _profileValidationType;
    NSNumber * _signatureVersion;
    NSString * _signerIdentity;
    NSString * _signerOrganization;
    unsigned long long  _signingInfoSource;
    NSString * _teamIdentifier;
}

@property (nonatomic, readonly, copy) NSString *codeInfoIdentifier;
@property (nonatomic, readonly) unsigned long long codeSignerType;
@property (nonatomic, readonly, copy) NSDictionary *dictionaryRepresentation;
@property (nonatomic, readonly, copy) NSDictionary *entitlements;
@property (nonatomic, readonly, copy) NSData *launchWarningData;
@property (nonatomic, readonly) unsigned long long profileValidationType;
@property (nonatomic, readonly, copy) NSNumber *signatureVersion;
@property (nonatomic, readonly, copy) NSString *signerIdentity;
@property (nonatomic, readonly, copy) NSString *signerOrganization;
@property (nonatomic, readonly) unsigned long long signingInfoSource;
@property (nonatomic, readonly, copy) NSString *teamIdentifier;

+ (bool)getValue:(id*)arg1 forEntitlement:(id)arg2 fromProcessWithAuditToken:(struct { unsigned int x1[8]; })arg3 error:(id*)arg4;
+ (id)signingIdentifierForAuditToken:(struct { unsigned int x1[8]; })arg1 error:(id*)arg2;

- (id)codeInfoIdentifier;
- (unsigned long long)codeSignerType;
- (id)dictionaryRepresentation;
- (id)entitlements;
- (id)initForTesting;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1 fromSource:(unsigned long long)arg2;
- (id)initWithSignerIdentity:(id)arg1 signerOrganization:(id)arg2 codeInfoIdentifier:(id)arg3 teamIdentifier:(id)arg4 signatureVersion:(id)arg5 entitlements:(id)arg6 signerType:(unsigned long long)arg7 profileType:(unsigned long long)arg8 signingInfoSource:(unsigned long long)arg9 launchWarningData:(id)arg10;
- (id)launchWarningData;
- (unsigned long long)profileValidationType;
- (id)signatureVersion;
- (id)signerIdentity;
- (id)signerOrganization;
- (unsigned long long)signingInfoSource;
- (id)teamIdentifier;

@end

@interface MICodeSigningVerifier : NSObject {
    bool  _allowAdhocSigning;
    MIExecutableBundle * _bundle;
    bool  _logResourceVerificationErrors;
    bool  _performOnlineAuthorization;
    MICodeSigningInfo * _signingInfo;
    bool  _skipProfileIDValidation;
    bool  _validateResources;
    bool  _validateUsingDetachedSignature;
    bool  _verifyTrustCachePresence;
}

@property (nonatomic) bool allowAdhocSigning;
@property (nonatomic, readonly) MIExecutableBundle *bundle;
@property (nonatomic) bool logResourceVerificationErrors;
@property (nonatomic) bool performOnlineAuthorization;
@property (nonatomic, readonly) MICodeSigningInfo *signingInfo;
@property (nonatomic) bool skipProfileIDValidation;
@property (nonatomic) bool validateResources;
@property (nonatomic) bool validateUsingDetachedSignature;
@property (nonatomic) bool verifyTrustCachePresence;

+ (bool)_validateBundleExecutable:(id)arg1 againstStubAt:(id)arg2 trustedHashes:(id)arg3 sectionName:(id)arg4 signingIdentifier:(id)arg5 error:(id*)arg6;
+ (id)_validateSignatureAndCopyInfoForURL:(id)arg1 withOptions:(id)arg2 error:(id*)arg3;
+ (bool)_validateStubSignature:(id)arg1 withSigningID:(id)arg2 error:(id*)arg3;
+ (id)codeSigningVerifierForBundle:(id)arg1;
+ (bool)validateWatchKitV1StubExecutableBundle:(id)arg1 error:(id*)arg2;
+ (bool)validateWatchKitV2StubExecutableBundle:(id)arg1 error:(id*)arg2;

- (bool)_getMICodeSignerTypeFromMISInfoDict:(id)arg1 codeSignerType:(unsigned long long*)arg2 profileType:(unsigned long long*)arg3 error:(id*)arg4;
- (id)_loadSystemDetachedSignatureForBundleID:(id)arg1 error:(id*)arg2;
- (bool)allowAdhocSigning;
- (id)bundle;
- (id)initWithBundle:(id)arg1;
- (bool)logResourceVerificationErrors;
- (bool)performOnlineAuthorization;
- (bool)performValidationWithError:(id*)arg1;
- (void)setAllowAdhocSigning:(bool)arg1;
- (void)setLogResourceVerificationErrors:(bool)arg1;
- (void)setPerformOnlineAuthorization:(bool)arg1;
- (void)setSkipProfileIDValidation:(bool)arg1;
- (void)setValidateResources:(bool)arg1;
- (void)setValidateUsingDetachedSignature:(bool)arg1;
- (void)setVerifyTrustCachePresence:(bool)arg1;
- (id)signingInfo;
- (bool)skipProfileIDValidation;
- (bool)validateResources;
- (bool)validateUsingDetachedSignature;
- (bool)verifyTrustCachePresence;

@end
